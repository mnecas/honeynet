---
- name: "Import ovf VM {{ item.name }}"
  community.vmware.vmware_deploy_ovf:
    hostname: "{{ esxi_hostname }}"
    username: "{{ esxi_username }}"
    password: "{{ esxi_password }}"
    validate_certs: "{{ validate_certs }}"
    networks: "{u'VM Network':u'{{ item.portgroup_name }}'}"
    name: "{{ item.name }}"
    ovf: "{{ item.ovf_image | default(ovf_image) }}"
    wait_for_ip_address: true
  delegate_to: localhost
  register: vm

- block:
  - name: wait for ip _really_ being available
    community.vmware.vmware_vm_info:
      hostname: "{{ esxi_hostname }}"
      username: "{{ esxi_username }}"
      password: "{{ esxi_password }}"
      validate_certs: "{{ validate_certs }}"
      vm_name: "{{ item.name }}"
    delegate_to: localhost
    register: facts
    until: facts.instance.ipv4 is not none
    when: item.compose_file
    retries: 30
    delay: 2

  - set_fact:
      vm_addr: "{{ facts['virtual_machines'][0]['ip_address'] }}"

  - name: "Add ansible host: '{{ item.vmware_vm_user }}'"
    ansible.builtin.add_host:
      hostname: "{{ vm_addr }}"
      ansible_ssh_user: "{{ item.vmware_vm_user | default(vmware_vm_user, true) }}"
      ansible_ssh_pass: "{{ item.vmware_vm_pass | default(vmware_vm_pass, true) }}"
      group: added_hosts

  - set_fact:
      honeypots: "{{ honeypots + [vm_addr] }}"
    when: ishoneypot

  # Run in the honeypot VM
  - block:
    - name: Create a directory if it does not exist
      ansible.builtin.file:
        path: /tmp/{{ item.name }}
        state: directory
        mode: '0755'

    - name: Copy Docker Compose files
      template:
        src: "{{ item.compose_file }}"
        dest: "/tmp/docker-compose.yml"

    - name: Install docker
      ansible.builtin.package:
        name:
          - docker
          - docker-compose
        state: present

    - name: Start docker service
      ansible.builtin.systemd:
        state: started
        name: docker.service

    - name: Start Docker Compose
      command: "docker-compose -f /tmp/docker-compose.yml up -d"
      register: output
    delegate_to: "{{ vm_addr }}"
  when: item.compose_file != None
